/*
 *  Mesh.h
 *  Crag
 *
 *  Created by John on 10/24/09.
 *  Copyright 2009, 2010 John McFarlane. All rights reserved.
 *  This program is distributed under the terms of the GNU General Public License.
 *
 */

#pragma once

#include "MeshProperties.h"
#include "VertexBuffer.h"

#include "gfx/IndexBuffer.h"

#include "core/debug.h"
#include "core/intrusive_list.h"

#include "glpp/Vbo_Types.h"


namespace form
{
	// forward-declaration
	class Point;
	
	// Stores a complete mesh of the formations.
	// Is generated by the NodeBuffer and then passed to a VertexBufferObject for rendering.
	class Mesh
	{
	public:
		// types
		typedef core::intrusive::hook<Mesh> hook_type;

		// functions
		Mesh(int max_num_verts, int max_num_tris);
		
		void Clear();
		
		MeshProperties & GetProperties();
		MeshProperties const & GetProperties() const;

		size_t GetIndexCount() const;
		size_t GetNumPolys() const;
		
		Vertex & GetVertex(Point & point);
	private:
		Vertex & AddVertex(Point const & p);
	public:
		
		void AddFace(Vertex & a, Vertex & b, Vertex & c, Vector3f const & normal);
		void AddFace(Point & a, Point & b, Point & c, Vector3f const & normal);

		VertexBuffer & GetVertices();
		VertexBuffer const & GetVertices() const;
		
		gfx::IndexBuffer & GetIndices();
		gfx::IndexBuffer const & GetIndices() const;
		
#if defined(VERIFY)
		void Verify() const;
#endif
		
		DUMP_OPERATOR_FRIEND_DECLARATION(Mesh);
		
	private:
		// variables
		VertexBuffer vertices;
		gfx::IndexBuffer indices;
		MeshProperties properties;
		hook_type _hook;
		
	public:
		// list type
		DEFINE_INTRUSIVE_LIST_TYPE(Mesh, _hook, list_type);
	};


	// used to return an unused mesh back to the formation manager
	struct MeshMessage
	{
		Mesh & _mesh;
	};
	
}
